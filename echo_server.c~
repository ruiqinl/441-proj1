/******************************************************************************
* echo_server.c                                                               *
*                                                                             *
* Description: This file contains the C source code for an echo server.  The  *
*              server runs on a hard-coded port and simply write back anything*
*              sent to it by connected clients.  It does not support          *
*              concurrent clients.                                            *
*                                                                             *
* Authors: Athula Balachandran <abalacha@cs.cmu.edu>,                         *
*          Wolf Richter <wolf@cs.cmu.edu>                                     *
*                                                                             *
*******************************************************************************/

#include <netinet/in.h>
#include <netinet/ip.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#include <arpa/inet.h>

#define ECHO_PORT 9999
#define BUF_SIZE 4096
#define IP_BUF_SIZE 128

int close_socket(int sock)
{
    if (close(sock))
    {
        fprintf(stderr, "Failed closing socket.\n");
        return 1;
    }
    return 0;
}


int main(int argc, char* argv[])
{
    int sock, client_sock;
    ssize_t readret;
    socklen_t cli_size;
    struct sockaddr_in addr, cli_addr;
    char buf[BUF_SIZE];
    char clientIP[INET6_ADDRSTRLEN];
    fd_set read_fds;
    fd_set master_fds;
    int maxfd, i;

    fprintf(stdout, "----- Echo Server -----\n");
    
    /* all networked programs must create a socket */
    if ((sock = socket(PF_INET, SOCK_STREAM, 0)) == -1)
    {
        fprintf(stderr, "Failed creating socket.\n");
        return EXIT_FAILURE;
    }

    addr.sin_family = AF_INET;
    addr.sin_port = htons(ECHO_PORT);
    addr.sin_addr.s_addr = INADDR_ANY;

    /* servers bind sockets to ports---notify the OS they accept connections */
    if (bind(sock, (struct sockaddr *) &addr, sizeof(addr)))
    {
        close_socket(sock);
        fprintf(stderr, "Failed binding socket.\n");
        return EXIT_FAILURE;
    }


    if (listen(sock, 5))
    {
        close_socket(sock);
        fprintf(stderr, "Error listening on socket.\n");
        return EXIT_FAILURE;
    }

    /* multiplexing  */
    FD_ZERO(&master_fds);
    FD_SET(sock, &master_fds);
    maxfd = sock;
    
    while (1) {
	read_fds = master_fds;
	if (select(maxfd+1, &read_fds, NULL, NULL, NULL) == -1){ // no timeval now
	    perror("Error! select");
	    return EXIT_FAILURE;
	}
	
	// check existing fds or sock in read_fds
	for (i = 0; i <= maxfd; i++){
	    if (FD_ISSET(i, &read_fds)){
		if (i == sock){
		    // new connection, no interest in the client sockaddr
		    if ((client_sock = accept(sock, (struct sockaddr *)&cli_addr, &cli_size)) == -1){
			perror("Error! accept");
			return EXIT_FAILURE;
		    }
		    printf("Server receives new connection from %s\n", inet_ntop(AF_INET, &(cli_addr.sin_addr), clientIP, INET6_ADDRSTRLEN));
		    FD_SET(client_sock, &master_fds);
		    // keep max fd
		    if (client_sock > maxfd)
			maxfd = client_sock;
		    
		} else {
		    // receive data from a client
		    if ((readret = recv(i, buf, BUF_SIZE, 0)) == -1) {
			perror("Error! recv");
			return EXIT_FAILURE;
		    } else if ( readret == 0){
			FD_CLR(i, &master_fds);
			close(i);
			printf("client closed\n");
		    } else {
			// receive some data, send it back
			if (send(i, buf, readret, 0) != readret){
			    perror("Error! send");
			    return EXIT_FAILURE;
			}
			printf("received data, sent it back to %s\n", clientIP);
		    }
		    
		} // end fd i
		
	    }// end currently available fd or sock
	}// end for

    }


    close_socket(sock);

    return EXIT_SUCCESS;
}
